<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pycharm+花生壳+git深度学习多地办公解决方案</title>
    <link href="/2024/12/02/pycharm-%E8%8A%B1%E7%94%9F%E5%A3%B3-git%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%9C%B0%E5%8A%9E%E5%85%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/12/02/pycharm-%E8%8A%B1%E7%94%9F%E5%A3%B3-git%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%9C%B0%E5%8A%9E%E5%85%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>通常情况下我们是在学校或公司的服务器上搭建深度学习环境，然后在自己的工位或者实验室使用个人电脑连接服务器使用其计算资源。个人电脑和服务器通常使用内网连接。那么当我们想要多地办公，比如当我们回到家里或是出差在外的时候仍能访问到我们服务器时，就会面临两个问题：一是如何访问处于校园网内网之下的服务器，二是如何保证所在地不同的设备上的代码版本同步。</p><p>这里介绍pycharm+花生壳+git的解决方案。花生壳主要用来进行内网穿透，git用来确保多设备版本同步。</p><h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><p>pycharm是深度学习领域最常用的编辑器，使用pycharm的ssh功能可以很轻松地实现本地与服务器的同步。这方面网上资料很多，这里就不赘述了。</p><h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p>pycharm的ssh功能虽然可以解决本地与服务器端同步的问题，但是ssh连接需要服务器的ip。当我们在校园网内的时候，直接运行命令</p> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><p>即可查看服务器的内网ip。使用内网ip可以直接ssh连接服务器。但是这里有两个问题，一是校园网ip动态获取、随时更新使得我们需要频繁手动更新ssh配置，二是当离开校园网环境便无法再连接服务器。</p><p>因此需要使用内网穿透技术对服务器ssh端口进行转发。如自行配置内网穿透需要一台拥有固定公网ip的服务器，可以租用各大云服务提供商如阿里云百度云的服务器。这里推荐一步到位直接使用国内贝锐花生壳的内网穿透服务，提供免费域名，访问域名即可访问到处于内网的服务器，方便快捷。（注：这里需要服务器自身是可以访问到外网的）</p><p> 花生壳官网安装教程<a href="https://service.oray.com/question/11630.html">https://service.oray.com/question/11630.html</a></p><p>官网下载花生壳客户端</p><img src="1.png" alt="image1" style="zoom: 50%;" /><p>安装客户端，在安装文件所在目录输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">dpkg -<span class="hljs-selector-tag">i</span> 安装包名称<span class="hljs-selector-class">.deb</span><br></code></pre></td></tr></table></figure><p><img src="/2024/12/02/pycharm-%E8%8A%B1%E7%94%9F%E5%A3%B3-git%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%9C%B0%E5%8A%9E%E5%85%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2.jpg" alt="image2"></p><p>浏览器打开花生壳管理页面，登录进入设备列表添加设备</p><p><img src="/2024/12/02/pycharm-%E8%8A%B1%E7%94%9F%E5%A3%B3-git%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%9C%B0%E5%8A%9E%E5%85%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3.jpg" alt="image3"></p><p>点击设备序号登陆设备之后点击内网穿透添加映射</p><p><img src="/2024/12/02/pycharm-%E8%8A%B1%E7%94%9F%E5%A3%B3-git%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%9C%B0%E5%8A%9E%E5%85%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/4.jpg" alt="image4"></p><p>设置映射参数，其中内网主机ip设为0.0.0.0，端口设为22</p><p><img src="/2024/12/02/pycharm-%E8%8A%B1%E7%94%9F%E5%A3%B3-git%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%9C%B0%E5%8A%9E%E5%85%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/5.jpg" alt="image5"></p><p>花生壳内网穿透配置完成，使用ssh user@域名:端口名 即可登录，其中端口名为花生壳服务端口。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>使用花生壳可以随时随地连接服务器，但是无法保证多台设备之间数据同步。git作为分布式多人协作版本管理软件可以很好的解决这个问题，以下是使用git进行多地办公时的一些要点</p><ul><li><p>远程仓库的设置</p><p>可以使用代码托管平台如github和gitee作为远程仓库，也可以自己在本地建立仓库。注意如果仓库在服务器本地，其他设备需设置远程服务器地址</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">ssh</span>://<span class="hljs-string">user</span>@域名:端口/<span class="hljs-string">git</span>/<span class="hljs-string">repo</span>/<span class="hljs-string">test</span>/.<span class="hljs-string">git</span><br></code></pre></td></tr></table></figure><p>其中需要指明仓库所在ip(或者域名)和所在路径</p></li><li><p>git和pycharm的冲突</p><p>由于pycharm会自动上传本地改动到服务器端，因此当本地或者服务器端推送新版本到远程仓库而另一方想要拉取的时候会就出现冲突。这时可以先让其中一方将改动push到远程服务器，然后另一方将当前工作区回退到上一个版本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> --hard <span class="hljs-built_in">origin</span>/master<br></code></pre></td></tr></table></figure><p>然后再拉取即可。</p></li><li><p>git add已追踪的文件。</p><p>项目根目录下不仅存放有代码，还可能存放有数据等我们不希望通过git同步的文件。如果使用<code>git add .</code>则会将工作区所有文件的改动提交到暂存区。如果只想添加已经tracked的文件，则使用命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> -u<br></code></pre></td></tr></table></figure><p>（训练数据等文件建议使用移动硬盘等设备手动传输）</p></li><li><p>git使用基本流程</p><ul><li>创建仓库<code>git int</code>或<code>git clone</code></li><li>每次写代码前从远程服务器拉取最新版本<code>git pull</code></li><li>添加文件和改动到暂存区<code>git add</code></li><li>提交改动<code>git commit</code></li><li>将改动推送到远程仓库<code>git push</code></li></ul></li><li><p>服务器端和本地同步</p><p>由于网络波动等原因，pycharm的自动上传功能并不稳定可靠，常常出现本地和服务器代码不一致的情况。在写代码的过程中可以经常使用pycharm中<code>工具</code>-&gt;<code>部署</code>-&gt;<code>与服务器端版本比较</code>选项来确保代码一致，同时也可以使用git来保证版本同步。这里推荐使用git来完成 。推荐每天写完代码或完成重要的功能都进行一次push和pull，以保证代码一致。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>局域网下的Git服务器搭建</title>
    <link href="/2024/10/25/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E7%9A%84Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/10/25/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E7%9A%84Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>Git是使用最广泛的多人协作和版本管理软件。使用代码托管平台如国外的github和国内的gitee可以轻松实现多人协作和版本管理，但是如果对代码有保密需求，就必须搭建一台服务器作为私有仓库使用，其他设备访问这台服务器获取代码。这里分成两个步骤：一是git仓库的搭建；二是局域网的搭建。</p><h2 id="Git服务器"><a href="#Git服务器" class="headerlink" title="Git服务器"></a>Git服务器</h2><p>在linux系统上搭建git服务器，参考链接<a href="https://www.runoob.com/git/git-server.html">https://www.runoob.com/git/git-server.html</a></p><ul><li><p>安装git</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install git<br></code></pre></td></tr></table></figure></li><li><p>初始化git仓库<br>在想要创建仓库的目录下输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><img src="/2024/10/25/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E7%9A%84Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/1.1.png" alt="图1"></p><p>其中<code>test</code>为项目名称，运行后会在当前路径建立test文件夹。</p></li><li><p>客户端拉取远程仓库</p><p>在客户端电脑上新建本地文件夹，如果是windows系统打开Git Bash</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">git clone hua<span class="hljs-variable">@10</span>.<span class="hljs-number">193.162</span>.<span class="hljs-number">88</span><span class="hljs-symbol">:/home/hua/Desktop/gitrepo/test</span><br></code></pre></td></tr></table></figure><p>其中<code>@</code>符号前为服务器上的用户名，<code>@</code>符号后为服务器ip，<code>:</code>后为git仓库所在路径</p><p><img src="/2024/10/25/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E7%9A%84Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/2.3.png" alt="图5"></p></li></ul><h2 id="局域网搭建"><a href="#局域网搭建" class="headerlink" title="局域网搭建"></a>局域网搭建</h2><p>关于局域网的搭建，这里给出两种解决方案</p><h3 id="方案一：校园网连接"><a href="#方案一：校园网连接" class="headerlink" title="方案一：校园网连接"></a><strong>方案一：校园网连接</strong></h3><p>使用校园网自动分配的ip，好处是走校园网内网，不消耗流量，只要能连上校园网就可以同步代码。问题是校园网ip不固定，动态分配，随时更新，需手动更改git仓库地址，有些麻烦。</p><h3 id="方案二：交换机和网线物理连接"><a href="#方案二：交换机和网线物理连接" class="headerlink" title="方案二：交换机和网线物理连接"></a><strong>方案二：交换机和网线物理连接</strong></h3><p>使用交换机和网线将服务器和工作机连接起来，缺点是空间受限，需要服务器和所有人的工作机都在同一个房间。也可以使用路由器wifi连接，但是wifi信号范围仍然有限。好处是速度快且可以固定ip。</p><ul><li><p>使用交换机和网线将设备连接起来，分别查看ip和子网掩码，确保两台电脑处于同一子网下(即两台电脑ip地址的子网掩码为1相对应的位相同)</p><p>Windows: <code>ipconfig</code></p><p>Linux: <code>ifconfig</code></p><img src="3.1.png" alt="图7" style="zoom: 80%;" /></li><li><p>也可以手动设置ip和子网掩码，确保设备处于同一子网之下</p></li></ul><p><code>控制面板</code>-&gt;<code>网络和Internet</code>-&gt;<code>网络和共享中心</code>-&gt;<code>以太网属性</code>-&gt;<code>IPv4</code>-&gt;<code>属性</code></p><img src="3.6.png" alt="图9" style="zoom:67%;" /><ul><li><p>windows系统需手动开启局域网防火墙</p><p><code>控制面板</code>-&gt;<code>系统和安全</code>-&gt;<code>Windows Defender 防火墙</code>-&gt;<code>高级设置</code></p><p><img src="/2024/10/25/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E7%9A%84Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/4.7.png" alt="图11"></p></li></ul><p>设置完成后</p><p><img src="/2024/10/25/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E7%9A%84Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/3.4.png" alt="图12"></p><ul><li><p>在一台电脑上ping另一台电脑的ip测试连接</p><img src="3.9.jpg" alt="图13" style="zoom: 67%;" /></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
